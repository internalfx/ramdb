'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('./utils');

var _isArray = require('mout/lang/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _merge = require('mout/object/merge');

var _merge2 = _interopRequireDefault(_merge);

var _omit = require('mout/object/omit');

var _omit2 = _interopRequireDefault(_omit);

var _clone = require('mout/lang/clone');

var _clone2 = _interopRequireDefault(_clone);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BaseSecondaryIndex = {

  set: function set(keyList, value) {
    if (!(0, _isArray2.default)(keyList)) {
      keyList = [keyList];
    }

    var key = keyList.shift() || null;
    var pos = (0, _utils.binarySearch)(this.keys, key);

    if (keyList.length === 0) {
      if (pos.found) {
        var dataLocation = (0, _utils.binarySearch)(this.values[pos.index], value);
        if (!dataLocation.found) {
          (0, _utils.insertAt)(this.values[pos.index], dataLocation.index, value);
        }
      } else {
        (0, _utils.insertAt)(this.keys, pos.index, key);
        (0, _utils.insertAt)(this.values, pos.index, [value]);
      }
    } else {
      if (pos.found) {
        this.values[pos.index].set(keyList, value);
      } else {
        (0, _utils.insertAt)(this.keys, pos.index, key);
        var newIndex = createIndex();
        newIndex.set(keyList, value);
        (0, _utils.insertAt)(this.values, pos.index, newIndex);
      }
    }
  },

  get: function get(keyList) {
    if (!(0, _isArray2.default)(keyList)) {
      keyList = [keyList];
    }

    var key = keyList.shift() || null;
    var pos = (0, _utils.binarySearch)(this.keys, key);

    if (keyList.length === 0) {
      if (pos.found) {
        if (this.values[pos.index].isIndex) {
          return this.values[pos.index].getAll();
        } else {
          return this.values[pos.index];
        }
      } else {
        return [];
      }
    } else {
      if (pos.found) {
        return this.values[pos.index].get(keyList);
      } else {
        return [];
      }
    }
  },

  getAll: function getAll() {
    var results = [];
    this.values.forEach(function (value) {
      if (value.isIndex) {
        results = results.concat(value.getAll());
      } else {
        results = results.concat(value);
      }
    });
    return results;
  },

  query: function query(_query) {
    var leftKeys = undefined;
    var rightKeys = undefined;

    if (_query['>']) {
      leftKeys = _query['>'];
      _query.leftInclusive = false;
    } else if (_query['>=']) {
      leftKeys = _query['>='];
      _query.leftInclusive = true;
    }

    if (_query['<']) {
      rightKeys = _query['<'];
      _query.rightInclusive = false;
    } else if (_query['<=']) {
      rightKeys = _query['<='];
      _query.rightInclusive = true;
    }

    if (leftKeys.length !== rightKeys.length) {
      throw new Error('Key arrays must be same length');
    }

    return this.between(leftKeys, rightKeys, (0, _omit2.default)(_query, ['>', '>=', '<', '<=']));
  },

  between: function between(leftKeys, rightKeys, opts) {
    opts = (0, _merge2.default)({
      leftInclusive: true,
      rightInclusive: false,
      limit: undefined,
      offset: 0
    }, opts);

    var results = this._between(leftKeys, rightKeys, opts);

    if (opts.limit) {
      return results.slice(opts.offset, opts.limit + opts.offset);
    } else {
      return results.slice(opts.offset);
    }
  },

  _between: function _between(leftKeys, rightKeys, opts) {
    var results = [];

    var leftKey = leftKeys.shift();
    var rightKey = rightKeys.shift();

    var pos = undefined;

    if (leftKey !== undefined) {
      pos = (0, _utils.binarySearch)(this.keys, leftKey);
    } else {
      pos = {
        found: false,
        index: 0
      };
    }

    if (leftKeys.length === 0) {
      if (pos.found && opts.leftInclusive === false) {
        pos.index += 1;
      }

      for (var i = pos.index; i < this.keys.length; i += 1) {
        if (rightKey !== undefined) {
          if (opts.rightInclusive) {
            if (this.keys[i] > rightKey) {
              break;
            }
          } else {
            if (this.keys[i] >= rightKey) {
              break;
            }
          }
        }

        if (this.values[i].isIndex) {
          results = results.concat(this.values[i].getAll());
        } else {
          results = results.concat(this.values[i]);
        }

        if (opts.limit) {
          if (results.length >= opts.limit + opts.offset) {
            break;
          }
        }
      }
    } else {
      for (var i = pos.index; i < this.keys.length; i += 1) {
        var currKey = this.keys[i];
        if (currKey > rightKey) {
          break;
        }

        if (this.values[i].isIndex) {
          if (currKey === leftKey) {
            results = results.concat(this.values[i]._between((0, _clone2.default)(leftKeys), rightKeys.map(function () {
              return undefined;
            }), opts));
          } else if (currKey === rightKey) {
            results = results.concat(this.values[i]._between(leftKeys.map(function () {
              return undefined;
            }), (0, _clone2.default)(rightKeys), opts));
          } else {
            results = results.concat(this.values[i].getAll());
          }
        } else {
          results = results.concat(this.values[i]);
        }

        if (opts.limit) {
          if (results.length >= opts.limit + opts.offset) {
            break;
          }
        }
      }
    }

    if (opts.limit) {
      return results.slice(0, opts.limit + opts.offset);
    } else {
      return results;
    }
  },

  remove: function remove(keyList, value) {
    if (!(0, _isArray2.default)(keyList)) {
      keyList = [keyList];
    }

    var key = keyList.shift();
    var pos = (0, _utils.binarySearch)(this.keys, key);

    if (keyList.length === 0) {
      if (pos.found) {
        var dataLocation = (0, _utils.binarySearch)(this.values[pos.index], value);
        if (dataLocation.found) {
          (0, _utils.removeAt)(this.values[pos.index], dataLocation.index);
          if (this.values[pos.index].length === 0) {
            (0, _utils.removeAt)(this.keys, pos.index);
            (0, _utils.removeAt)(this.values, pos.index);
          }
        }
      }
    } else {
      if (pos.found) {
        this.values[pos.index].delete(keyList, value);
      }
    }
  },

  clear: function clear() {
    this.keys = [];
    this.values = [];
  },

  insertRecord: function insertRecord(data) {
    if (!_immutable2.default.Map.isMap(data)) {
      throw new Error('data must be an Immutable Map');
    }

    var keyList = [];
    this.fieldList.forEach(function (field) {
      var key = data.get(field, null);
      keyList.push(key);
    });

    this.set(keyList, data.get('id'));
  },

  removeRecord: function removeRecord(data) {
    if (!_immutable2.default.Map.isMap(data)) {
      throw new Error('data must be an Immutable Map');
    }

    var keyList = [];
    this.fieldList.forEach(function (field) {
      var key = data.get(field, null);
      keyList.push(key);
    });

    this.remove(keyList, data.get('id'));
  },

  updateRecord: function updateRecord(data) {
    this.removeRecord(data);
    this.insertRecord(data);
  }
};
// import isString from 'mout/lang/isString'

var createIndex = function createIndex() {
  var fieldList = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

  var index = Object.create(BaseSecondaryIndex);

  if (!(0, _isArray2.default)(fieldList)) {
    throw new Error('fieldList must be an array.');
  }

  index.fieldList = fieldList;
  index.isIndex = true;
  index.keys = [];
  index.values = [];

  return index;
};

exports.default = createIndex;
//# sourceMappingURL=data:application/json;base64,